# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class TradelineResp(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            accountType = schemas.StrSchema
            amount1 = schemas.StrSchema
            amount1Qualifier = schemas.StrSchema
            amount2 = schemas.StrSchema
            amount2Qualifier = schemas.StrSchema
            amountBalloonPayment = schemas.StrSchema
            amountPastDue = schemas.StrSchema
            balanceAmount = schemas.StrSchema
            balanceDate = schemas.StrSchema
            bankruptcyChapterNumber = schemas.StrSchema
            consumerComment = schemas.StrSchema
            consumerDisputeFlag = schemas.StrSchema
            datePaymentDue = schemas.StrSchema
            delinquencies30Days = schemas.StrSchema
            delinquencies60Days = schemas.StrSchema
            delinquencies90to180Days = schemas.StrSchema
            derogCounter = schemas.StrSchema
            ecoa = schemas.StrSchema
        
            @staticmethod
            def enhancedPaymentData() -> typing.Type['EnhancedPaymentData']:
                return EnhancedPaymentData
            evaluation = schemas.StrSchema
            kob = schemas.StrSchema
            lastPaymentDate = schemas.StrSchema
            maxDelinquencyDate = schemas.StrSchema
            monthlyPaymentAmount = schemas.StrSchema
            monthlyPaymentType = schemas.StrSchema
            monthsHistory = schemas.StrSchema
            openDate = schemas.StrSchema
            openOrClosed = schemas.StrSchema
            originalCreditorName = schemas.StrSchema
            paymentHistory = schemas.StrSchema
            revolvingOrInstallment = schemas.StrSchema
            soldToName = schemas.StrSchema
            specialComment = schemas.StrSchema
            status = schemas.StrSchema
            statusDate = schemas.StrSchema
            subscriberCode = schemas.StrSchema
            subscriberName = schemas.StrSchema
            terms = schemas.StrSchema
            __annotations__ = {
                "accountType": accountType,
                "amount1": amount1,
                "amount1Qualifier": amount1Qualifier,
                "amount2": amount2,
                "amount2Qualifier": amount2Qualifier,
                "amountBalloonPayment": amountBalloonPayment,
                "amountPastDue": amountPastDue,
                "balanceAmount": balanceAmount,
                "balanceDate": balanceDate,
                "bankruptcyChapterNumber": bankruptcyChapterNumber,
                "consumerComment": consumerComment,
                "consumerDisputeFlag": consumerDisputeFlag,
                "datePaymentDue": datePaymentDue,
                "delinquencies30Days": delinquencies30Days,
                "delinquencies60Days": delinquencies60Days,
                "delinquencies90to180Days": delinquencies90to180Days,
                "derogCounter": derogCounter,
                "ecoa": ecoa,
                "enhancedPaymentData": enhancedPaymentData,
                "evaluation": evaluation,
                "kob": kob,
                "lastPaymentDate": lastPaymentDate,
                "maxDelinquencyDate": maxDelinquencyDate,
                "monthlyPaymentAmount": monthlyPaymentAmount,
                "monthlyPaymentType": monthlyPaymentType,
                "monthsHistory": monthsHistory,
                "openDate": openDate,
                "openOrClosed": openOrClosed,
                "originalCreditorName": originalCreditorName,
                "paymentHistory": paymentHistory,
                "revolvingOrInstallment": revolvingOrInstallment,
                "soldToName": soldToName,
                "specialComment": specialComment,
                "status": status,
                "statusDate": statusDate,
                "subscriberCode": subscriberCode,
                "subscriberName": subscriberName,
                "terms": terms,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountType"]) -> MetaOapg.properties.accountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount1"]) -> MetaOapg.properties.amount1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount1Qualifier"]) -> MetaOapg.properties.amount1Qualifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount2"]) -> MetaOapg.properties.amount2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount2Qualifier"]) -> MetaOapg.properties.amount2Qualifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountBalloonPayment"]) -> MetaOapg.properties.amountBalloonPayment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountPastDue"]) -> MetaOapg.properties.amountPastDue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balanceAmount"]) -> MetaOapg.properties.balanceAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balanceDate"]) -> MetaOapg.properties.balanceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankruptcyChapterNumber"]) -> MetaOapg.properties.bankruptcyChapterNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerComment"]) -> MetaOapg.properties.consumerComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerDisputeFlag"]) -> MetaOapg.properties.consumerDisputeFlag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datePaymentDue"]) -> MetaOapg.properties.datePaymentDue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delinquencies30Days"]) -> MetaOapg.properties.delinquencies30Days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delinquencies60Days"]) -> MetaOapg.properties.delinquencies60Days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delinquencies90to180Days"]) -> MetaOapg.properties.delinquencies90to180Days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derogCounter"]) -> MetaOapg.properties.derogCounter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ecoa"]) -> MetaOapg.properties.ecoa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enhancedPaymentData"]) -> 'EnhancedPaymentData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evaluation"]) -> MetaOapg.properties.evaluation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kob"]) -> MetaOapg.properties.kob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastPaymentDate"]) -> MetaOapg.properties.lastPaymentDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxDelinquencyDate"]) -> MetaOapg.properties.maxDelinquencyDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyPaymentAmount"]) -> MetaOapg.properties.monthlyPaymentAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyPaymentType"]) -> MetaOapg.properties.monthlyPaymentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthsHistory"]) -> MetaOapg.properties.monthsHistory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openDate"]) -> MetaOapg.properties.openDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openOrClosed"]) -> MetaOapg.properties.openOrClosed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalCreditorName"]) -> MetaOapg.properties.originalCreditorName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentHistory"]) -> MetaOapg.properties.paymentHistory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revolvingOrInstallment"]) -> MetaOapg.properties.revolvingOrInstallment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["soldToName"]) -> MetaOapg.properties.soldToName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specialComment"]) -> MetaOapg.properties.specialComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusDate"]) -> MetaOapg.properties.statusDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriberCode"]) -> MetaOapg.properties.subscriberCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriberName"]) -> MetaOapg.properties.subscriberName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terms"]) -> MetaOapg.properties.terms: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountType", "amount1", "amount1Qualifier", "amount2", "amount2Qualifier", "amountBalloonPayment", "amountPastDue", "balanceAmount", "balanceDate", "bankruptcyChapterNumber", "consumerComment", "consumerDisputeFlag", "datePaymentDue", "delinquencies30Days", "delinquencies60Days", "delinquencies90to180Days", "derogCounter", "ecoa", "enhancedPaymentData", "evaluation", "kob", "lastPaymentDate", "maxDelinquencyDate", "monthlyPaymentAmount", "monthlyPaymentType", "monthsHistory", "openDate", "openOrClosed", "originalCreditorName", "paymentHistory", "revolvingOrInstallment", "soldToName", "specialComment", "status", "statusDate", "subscriberCode", "subscriberName", "terms", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountType"]) -> typing.Union[MetaOapg.properties.accountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount1"]) -> typing.Union[MetaOapg.properties.amount1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount1Qualifier"]) -> typing.Union[MetaOapg.properties.amount1Qualifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount2"]) -> typing.Union[MetaOapg.properties.amount2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount2Qualifier"]) -> typing.Union[MetaOapg.properties.amount2Qualifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountBalloonPayment"]) -> typing.Union[MetaOapg.properties.amountBalloonPayment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountPastDue"]) -> typing.Union[MetaOapg.properties.amountPastDue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balanceAmount"]) -> typing.Union[MetaOapg.properties.balanceAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balanceDate"]) -> typing.Union[MetaOapg.properties.balanceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankruptcyChapterNumber"]) -> typing.Union[MetaOapg.properties.bankruptcyChapterNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerComment"]) -> typing.Union[MetaOapg.properties.consumerComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerDisputeFlag"]) -> typing.Union[MetaOapg.properties.consumerDisputeFlag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datePaymentDue"]) -> typing.Union[MetaOapg.properties.datePaymentDue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delinquencies30Days"]) -> typing.Union[MetaOapg.properties.delinquencies30Days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delinquencies60Days"]) -> typing.Union[MetaOapg.properties.delinquencies60Days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delinquencies90to180Days"]) -> typing.Union[MetaOapg.properties.delinquencies90to180Days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derogCounter"]) -> typing.Union[MetaOapg.properties.derogCounter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ecoa"]) -> typing.Union[MetaOapg.properties.ecoa, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enhancedPaymentData"]) -> typing.Union['EnhancedPaymentData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evaluation"]) -> typing.Union[MetaOapg.properties.evaluation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kob"]) -> typing.Union[MetaOapg.properties.kob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastPaymentDate"]) -> typing.Union[MetaOapg.properties.lastPaymentDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxDelinquencyDate"]) -> typing.Union[MetaOapg.properties.maxDelinquencyDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyPaymentAmount"]) -> typing.Union[MetaOapg.properties.monthlyPaymentAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyPaymentType"]) -> typing.Union[MetaOapg.properties.monthlyPaymentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthsHistory"]) -> typing.Union[MetaOapg.properties.monthsHistory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openDate"]) -> typing.Union[MetaOapg.properties.openDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openOrClosed"]) -> typing.Union[MetaOapg.properties.openOrClosed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalCreditorName"]) -> typing.Union[MetaOapg.properties.originalCreditorName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentHistory"]) -> typing.Union[MetaOapg.properties.paymentHistory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revolvingOrInstallment"]) -> typing.Union[MetaOapg.properties.revolvingOrInstallment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["soldToName"]) -> typing.Union[MetaOapg.properties.soldToName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specialComment"]) -> typing.Union[MetaOapg.properties.specialComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusDate"]) -> typing.Union[MetaOapg.properties.statusDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriberCode"]) -> typing.Union[MetaOapg.properties.subscriberCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriberName"]) -> typing.Union[MetaOapg.properties.subscriberName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terms"]) -> typing.Union[MetaOapg.properties.terms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountType", "amount1", "amount1Qualifier", "amount2", "amount2Qualifier", "amountBalloonPayment", "amountPastDue", "balanceAmount", "balanceDate", "bankruptcyChapterNumber", "consumerComment", "consumerDisputeFlag", "datePaymentDue", "delinquencies30Days", "delinquencies60Days", "delinquencies90to180Days", "derogCounter", "ecoa", "enhancedPaymentData", "evaluation", "kob", "lastPaymentDate", "maxDelinquencyDate", "monthlyPaymentAmount", "monthlyPaymentType", "monthsHistory", "openDate", "openOrClosed", "originalCreditorName", "paymentHistory", "revolvingOrInstallment", "soldToName", "specialComment", "status", "statusDate", "subscriberCode", "subscriberName", "terms", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountType: typing.Union[MetaOapg.properties.accountType, str, schemas.Unset] = schemas.unset,
        amount1: typing.Union[MetaOapg.properties.amount1, str, schemas.Unset] = schemas.unset,
        amount1Qualifier: typing.Union[MetaOapg.properties.amount1Qualifier, str, schemas.Unset] = schemas.unset,
        amount2: typing.Union[MetaOapg.properties.amount2, str, schemas.Unset] = schemas.unset,
        amount2Qualifier: typing.Union[MetaOapg.properties.amount2Qualifier, str, schemas.Unset] = schemas.unset,
        amountBalloonPayment: typing.Union[MetaOapg.properties.amountBalloonPayment, str, schemas.Unset] = schemas.unset,
        amountPastDue: typing.Union[MetaOapg.properties.amountPastDue, str, schemas.Unset] = schemas.unset,
        balanceAmount: typing.Union[MetaOapg.properties.balanceAmount, str, schemas.Unset] = schemas.unset,
        balanceDate: typing.Union[MetaOapg.properties.balanceDate, str, schemas.Unset] = schemas.unset,
        bankruptcyChapterNumber: typing.Union[MetaOapg.properties.bankruptcyChapterNumber, str, schemas.Unset] = schemas.unset,
        consumerComment: typing.Union[MetaOapg.properties.consumerComment, str, schemas.Unset] = schemas.unset,
        consumerDisputeFlag: typing.Union[MetaOapg.properties.consumerDisputeFlag, str, schemas.Unset] = schemas.unset,
        datePaymentDue: typing.Union[MetaOapg.properties.datePaymentDue, str, schemas.Unset] = schemas.unset,
        delinquencies30Days: typing.Union[MetaOapg.properties.delinquencies30Days, str, schemas.Unset] = schemas.unset,
        delinquencies60Days: typing.Union[MetaOapg.properties.delinquencies60Days, str, schemas.Unset] = schemas.unset,
        delinquencies90to180Days: typing.Union[MetaOapg.properties.delinquencies90to180Days, str, schemas.Unset] = schemas.unset,
        derogCounter: typing.Union[MetaOapg.properties.derogCounter, str, schemas.Unset] = schemas.unset,
        ecoa: typing.Union[MetaOapg.properties.ecoa, str, schemas.Unset] = schemas.unset,
        enhancedPaymentData: typing.Union['EnhancedPaymentData', schemas.Unset] = schemas.unset,
        evaluation: typing.Union[MetaOapg.properties.evaluation, str, schemas.Unset] = schemas.unset,
        kob: typing.Union[MetaOapg.properties.kob, str, schemas.Unset] = schemas.unset,
        lastPaymentDate: typing.Union[MetaOapg.properties.lastPaymentDate, str, schemas.Unset] = schemas.unset,
        maxDelinquencyDate: typing.Union[MetaOapg.properties.maxDelinquencyDate, str, schemas.Unset] = schemas.unset,
        monthlyPaymentAmount: typing.Union[MetaOapg.properties.monthlyPaymentAmount, str, schemas.Unset] = schemas.unset,
        monthlyPaymentType: typing.Union[MetaOapg.properties.monthlyPaymentType, str, schemas.Unset] = schemas.unset,
        monthsHistory: typing.Union[MetaOapg.properties.monthsHistory, str, schemas.Unset] = schemas.unset,
        openDate: typing.Union[MetaOapg.properties.openDate, str, schemas.Unset] = schemas.unset,
        openOrClosed: typing.Union[MetaOapg.properties.openOrClosed, str, schemas.Unset] = schemas.unset,
        originalCreditorName: typing.Union[MetaOapg.properties.originalCreditorName, str, schemas.Unset] = schemas.unset,
        paymentHistory: typing.Union[MetaOapg.properties.paymentHistory, str, schemas.Unset] = schemas.unset,
        revolvingOrInstallment: typing.Union[MetaOapg.properties.revolvingOrInstallment, str, schemas.Unset] = schemas.unset,
        soldToName: typing.Union[MetaOapg.properties.soldToName, str, schemas.Unset] = schemas.unset,
        specialComment: typing.Union[MetaOapg.properties.specialComment, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        statusDate: typing.Union[MetaOapg.properties.statusDate, str, schemas.Unset] = schemas.unset,
        subscriberCode: typing.Union[MetaOapg.properties.subscriberCode, str, schemas.Unset] = schemas.unset,
        subscriberName: typing.Union[MetaOapg.properties.subscriberName, str, schemas.Unset] = schemas.unset,
        terms: typing.Union[MetaOapg.properties.terms, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TradelineResp':
        return super().__new__(
            cls,
            *args,
            accountType=accountType,
            amount1=amount1,
            amount1Qualifier=amount1Qualifier,
            amount2=amount2,
            amount2Qualifier=amount2Qualifier,
            amountBalloonPayment=amountBalloonPayment,
            amountPastDue=amountPastDue,
            balanceAmount=balanceAmount,
            balanceDate=balanceDate,
            bankruptcyChapterNumber=bankruptcyChapterNumber,
            consumerComment=consumerComment,
            consumerDisputeFlag=consumerDisputeFlag,
            datePaymentDue=datePaymentDue,
            delinquencies30Days=delinquencies30Days,
            delinquencies60Days=delinquencies60Days,
            delinquencies90to180Days=delinquencies90to180Days,
            derogCounter=derogCounter,
            ecoa=ecoa,
            enhancedPaymentData=enhancedPaymentData,
            evaluation=evaluation,
            kob=kob,
            lastPaymentDate=lastPaymentDate,
            maxDelinquencyDate=maxDelinquencyDate,
            monthlyPaymentAmount=monthlyPaymentAmount,
            monthlyPaymentType=monthlyPaymentType,
            monthsHistory=monthsHistory,
            openDate=openDate,
            openOrClosed=openOrClosed,
            originalCreditorName=originalCreditorName,
            paymentHistory=paymentHistory,
            revolvingOrInstallment=revolvingOrInstallment,
            soldToName=soldToName,
            specialComment=specialComment,
            status=status,
            statusDate=statusDate,
            subscriberCode=subscriberCode,
            subscriberName=subscriberName,
            terms=terms,
            _configuration=_configuration,
            **kwargs,
        )

from experian_prequal.model.enhanced_payment_data import EnhancedPaymentData
