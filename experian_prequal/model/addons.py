# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class Addons(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Add on products that can be requested. Each add on is billable. These are optional parameters and can be omitted if not needed.
    """


    class MetaOapg:
        
        class properties:
            directCheck = schemas.StrSchema
            demographics = schemas.StrSchema
            staggSelect = schemas.StrSchema
            clarityEarlyRiskScore = schemas.StrSchema
        
            @staticmethod
            def clarityData() -> typing.Type['ClarityAccountData']:
                return ClarityAccountData
            eCBSV = schemas.StrSchema
        
            @staticmethod
            def eCBSVData() -> typing.Type['ECBSVAttributeData']:
                return ECBSVAttributeData
            renterRiskScore = schemas.StrSchema
        
            @staticmethod
            def rentBureauData() -> typing.Type['RentBureauAccountData']:
                return RentBureauAccountData
        
            @staticmethod
            def riskModels() -> typing.Type['RiskModel']:
                return RiskModel
            
            
            class summaries(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class summaryType(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'summaryType':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "summaryType": summaryType,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["summaryType"]) -> MetaOapg.properties.summaryType: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["summaryType", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["summaryType"]) -> typing.Union[MetaOapg.properties.summaryType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summaryType", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    summaryType: typing.Union[MetaOapg.properties.summaryType, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'summaries':
                    return super().__new__(
                        cls,
                        *args,
                        summaryType=summaryType,
                        _configuration=_configuration,
                        **kwargs,
                    )
            fraudShield = schemas.StrSchema
            mla = schemas.StrSchema
            ofacmsg = schemas.StrSchema
        
            @staticmethod
            def consumerIdentCheck() -> typing.Type['ConsumerIdentifierCheckOptions']:
                return ConsumerIdentifierCheckOptions
            joint = schemas.StrSchema
            paymentHistory84 = schemas.StrSchema
            outputType = schemas.StrSchema
            __annotations__ = {
                "directCheck": directCheck,
                "demographics": demographics,
                "staggSelect": staggSelect,
                "clarityEarlyRiskScore": clarityEarlyRiskScore,
                "clarityData": clarityData,
                "eCBSV": eCBSV,
                "eCBSVData": eCBSVData,
                "renterRiskScore": renterRiskScore,
                "rentBureauData": rentBureauData,
                "riskModels": riskModels,
                "summaries": summaries,
                "fraudShield": fraudShield,
                "mla": mla,
                "ofacmsg": ofacmsg,
                "consumerIdentCheck": consumerIdentCheck,
                "joint": joint,
                "paymentHistory84": paymentHistory84,
                "outputType": outputType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directCheck"]) -> MetaOapg.properties.directCheck: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demographics"]) -> MetaOapg.properties.demographics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staggSelect"]) -> MetaOapg.properties.staggSelect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clarityEarlyRiskScore"]) -> MetaOapg.properties.clarityEarlyRiskScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clarityData"]) -> 'ClarityAccountData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eCBSV"]) -> MetaOapg.properties.eCBSV: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eCBSVData"]) -> 'ECBSVAttributeData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renterRiskScore"]) -> MetaOapg.properties.renterRiskScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rentBureauData"]) -> 'RentBureauAccountData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskModels"]) -> 'RiskModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summaries"]) -> MetaOapg.properties.summaries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fraudShield"]) -> MetaOapg.properties.fraudShield: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mla"]) -> MetaOapg.properties.mla: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ofacmsg"]) -> MetaOapg.properties.ofacmsg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerIdentCheck"]) -> 'ConsumerIdentifierCheckOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joint"]) -> MetaOapg.properties.joint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentHistory84"]) -> MetaOapg.properties.paymentHistory84: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputType"]) -> MetaOapg.properties.outputType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["directCheck", "demographics", "staggSelect", "clarityEarlyRiskScore", "clarityData", "eCBSV", "eCBSVData", "renterRiskScore", "rentBureauData", "riskModels", "summaries", "fraudShield", "mla", "ofacmsg", "consumerIdentCheck", "joint", "paymentHistory84", "outputType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directCheck"]) -> typing.Union[MetaOapg.properties.directCheck, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demographics"]) -> typing.Union[MetaOapg.properties.demographics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staggSelect"]) -> typing.Union[MetaOapg.properties.staggSelect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clarityEarlyRiskScore"]) -> typing.Union[MetaOapg.properties.clarityEarlyRiskScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clarityData"]) -> typing.Union['ClarityAccountData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eCBSV"]) -> typing.Union[MetaOapg.properties.eCBSV, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eCBSVData"]) -> typing.Union['ECBSVAttributeData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renterRiskScore"]) -> typing.Union[MetaOapg.properties.renterRiskScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rentBureauData"]) -> typing.Union['RentBureauAccountData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskModels"]) -> typing.Union['RiskModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summaries"]) -> typing.Union[MetaOapg.properties.summaries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fraudShield"]) -> typing.Union[MetaOapg.properties.fraudShield, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mla"]) -> typing.Union[MetaOapg.properties.mla, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ofacmsg"]) -> typing.Union[MetaOapg.properties.ofacmsg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerIdentCheck"]) -> typing.Union['ConsumerIdentifierCheckOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joint"]) -> typing.Union[MetaOapg.properties.joint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentHistory84"]) -> typing.Union[MetaOapg.properties.paymentHistory84, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputType"]) -> typing.Union[MetaOapg.properties.outputType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["directCheck", "demographics", "staggSelect", "clarityEarlyRiskScore", "clarityData", "eCBSV", "eCBSVData", "renterRiskScore", "rentBureauData", "riskModels", "summaries", "fraudShield", "mla", "ofacmsg", "consumerIdentCheck", "joint", "paymentHistory84", "outputType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        directCheck: typing.Union[MetaOapg.properties.directCheck, str, schemas.Unset] = schemas.unset,
        demographics: typing.Union[MetaOapg.properties.demographics, str, schemas.Unset] = schemas.unset,
        staggSelect: typing.Union[MetaOapg.properties.staggSelect, str, schemas.Unset] = schemas.unset,
        clarityEarlyRiskScore: typing.Union[MetaOapg.properties.clarityEarlyRiskScore, str, schemas.Unset] = schemas.unset,
        clarityData: typing.Union['ClarityAccountData', schemas.Unset] = schemas.unset,
        eCBSV: typing.Union[MetaOapg.properties.eCBSV, str, schemas.Unset] = schemas.unset,
        eCBSVData: typing.Union['ECBSVAttributeData', schemas.Unset] = schemas.unset,
        renterRiskScore: typing.Union[MetaOapg.properties.renterRiskScore, str, schemas.Unset] = schemas.unset,
        rentBureauData: typing.Union['RentBureauAccountData', schemas.Unset] = schemas.unset,
        riskModels: typing.Union['RiskModel', schemas.Unset] = schemas.unset,
        summaries: typing.Union[MetaOapg.properties.summaries, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        fraudShield: typing.Union[MetaOapg.properties.fraudShield, str, schemas.Unset] = schemas.unset,
        mla: typing.Union[MetaOapg.properties.mla, str, schemas.Unset] = schemas.unset,
        ofacmsg: typing.Union[MetaOapg.properties.ofacmsg, str, schemas.Unset] = schemas.unset,
        consumerIdentCheck: typing.Union['ConsumerIdentifierCheckOptions', schemas.Unset] = schemas.unset,
        joint: typing.Union[MetaOapg.properties.joint, str, schemas.Unset] = schemas.unset,
        paymentHistory84: typing.Union[MetaOapg.properties.paymentHistory84, str, schemas.Unset] = schemas.unset,
        outputType: typing.Union[MetaOapg.properties.outputType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Addons':
        return super().__new__(
            cls,
            *args,
            directCheck=directCheck,
            demographics=demographics,
            staggSelect=staggSelect,
            clarityEarlyRiskScore=clarityEarlyRiskScore,
            clarityData=clarityData,
            eCBSV=eCBSV,
            eCBSVData=eCBSVData,
            renterRiskScore=renterRiskScore,
            rentBureauData=rentBureauData,
            riskModels=riskModels,
            summaries=summaries,
            fraudShield=fraudShield,
            mla=mla,
            ofacmsg=ofacmsg,
            consumerIdentCheck=consumerIdentCheck,
            joint=joint,
            paymentHistory84=paymentHistory84,
            outputType=outputType,
            _configuration=_configuration,
            **kwargs,
        )

from experian_prequal.model.clarity_account_data import ClarityAccountData
from experian_prequal.model.consumer_identifier_check_options import ConsumerIdentifierCheckOptions
from experian_prequal.model.ecbsv_attribute_data import ECBSVAttributeData
from experian_prequal.model.rent_bureau_account_data import RentBureauAccountData
from experian_prequal.model.risk_model import RiskModel
