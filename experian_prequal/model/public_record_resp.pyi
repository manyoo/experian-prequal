# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class PublicRecordResp(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            adjustmentPercent = schemas.StrSchema
            amount = schemas.StrSchema
            bankruptcyAssetAmount = schemas.StrSchema
            bankruptcyVoluntaryIndicator = schemas.StrSchema
            bookPageSequence = schemas.StrSchema
            consumerComment = schemas.StrSchema
            courtCode = schemas.StrSchema
            courtName = schemas.StrSchema
            disputeFlag = schemas.StrSchema
            ecoa = schemas.StrSchema
            evaluation = schemas.StrSchema
            filingDate = schemas.StrSchema
            plaintiffName = schemas.StrSchema
            referenceNumber = schemas.StrSchema
            repaymentPercent = schemas.StrSchema
            status = schemas.StrSchema
            statusDate = schemas.StrSchema
            __annotations__ = {
                "adjustmentPercent": adjustmentPercent,
                "amount": amount,
                "bankruptcyAssetAmount": bankruptcyAssetAmount,
                "bankruptcyVoluntaryIndicator": bankruptcyVoluntaryIndicator,
                "bookPageSequence": bookPageSequence,
                "consumerComment": consumerComment,
                "courtCode": courtCode,
                "courtName": courtName,
                "disputeFlag": disputeFlag,
                "ecoa": ecoa,
                "evaluation": evaluation,
                "filingDate": filingDate,
                "plaintiffName": plaintiffName,
                "referenceNumber": referenceNumber,
                "repaymentPercent": repaymentPercent,
                "status": status,
                "statusDate": statusDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjustmentPercent"]) -> MetaOapg.properties.adjustmentPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankruptcyAssetAmount"]) -> MetaOapg.properties.bankruptcyAssetAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankruptcyVoluntaryIndicator"]) -> MetaOapg.properties.bankruptcyVoluntaryIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bookPageSequence"]) -> MetaOapg.properties.bookPageSequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerComment"]) -> MetaOapg.properties.consumerComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtCode"]) -> MetaOapg.properties.courtCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtName"]) -> MetaOapg.properties.courtName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disputeFlag"]) -> MetaOapg.properties.disputeFlag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ecoa"]) -> MetaOapg.properties.ecoa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evaluation"]) -> MetaOapg.properties.evaluation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filingDate"]) -> MetaOapg.properties.filingDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plaintiffName"]) -> MetaOapg.properties.plaintiffName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referenceNumber"]) -> MetaOapg.properties.referenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repaymentPercent"]) -> MetaOapg.properties.repaymentPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusDate"]) -> MetaOapg.properties.statusDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["adjustmentPercent", "amount", "bankruptcyAssetAmount", "bankruptcyVoluntaryIndicator", "bookPageSequence", "consumerComment", "courtCode", "courtName", "disputeFlag", "ecoa", "evaluation", "filingDate", "plaintiffName", "referenceNumber", "repaymentPercent", "status", "statusDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjustmentPercent"]) -> typing.Union[MetaOapg.properties.adjustmentPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankruptcyAssetAmount"]) -> typing.Union[MetaOapg.properties.bankruptcyAssetAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankruptcyVoluntaryIndicator"]) -> typing.Union[MetaOapg.properties.bankruptcyVoluntaryIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bookPageSequence"]) -> typing.Union[MetaOapg.properties.bookPageSequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerComment"]) -> typing.Union[MetaOapg.properties.consumerComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtCode"]) -> typing.Union[MetaOapg.properties.courtCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtName"]) -> typing.Union[MetaOapg.properties.courtName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disputeFlag"]) -> typing.Union[MetaOapg.properties.disputeFlag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ecoa"]) -> typing.Union[MetaOapg.properties.ecoa, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evaluation"]) -> typing.Union[MetaOapg.properties.evaluation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filingDate"]) -> typing.Union[MetaOapg.properties.filingDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plaintiffName"]) -> typing.Union[MetaOapg.properties.plaintiffName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referenceNumber"]) -> typing.Union[MetaOapg.properties.referenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repaymentPercent"]) -> typing.Union[MetaOapg.properties.repaymentPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusDate"]) -> typing.Union[MetaOapg.properties.statusDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["adjustmentPercent", "amount", "bankruptcyAssetAmount", "bankruptcyVoluntaryIndicator", "bookPageSequence", "consumerComment", "courtCode", "courtName", "disputeFlag", "ecoa", "evaluation", "filingDate", "plaintiffName", "referenceNumber", "repaymentPercent", "status", "statusDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        adjustmentPercent: typing.Union[MetaOapg.properties.adjustmentPercent, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        bankruptcyAssetAmount: typing.Union[MetaOapg.properties.bankruptcyAssetAmount, str, schemas.Unset] = schemas.unset,
        bankruptcyVoluntaryIndicator: typing.Union[MetaOapg.properties.bankruptcyVoluntaryIndicator, str, schemas.Unset] = schemas.unset,
        bookPageSequence: typing.Union[MetaOapg.properties.bookPageSequence, str, schemas.Unset] = schemas.unset,
        consumerComment: typing.Union[MetaOapg.properties.consumerComment, str, schemas.Unset] = schemas.unset,
        courtCode: typing.Union[MetaOapg.properties.courtCode, str, schemas.Unset] = schemas.unset,
        courtName: typing.Union[MetaOapg.properties.courtName, str, schemas.Unset] = schemas.unset,
        disputeFlag: typing.Union[MetaOapg.properties.disputeFlag, str, schemas.Unset] = schemas.unset,
        ecoa: typing.Union[MetaOapg.properties.ecoa, str, schemas.Unset] = schemas.unset,
        evaluation: typing.Union[MetaOapg.properties.evaluation, str, schemas.Unset] = schemas.unset,
        filingDate: typing.Union[MetaOapg.properties.filingDate, str, schemas.Unset] = schemas.unset,
        plaintiffName: typing.Union[MetaOapg.properties.plaintiffName, str, schemas.Unset] = schemas.unset,
        referenceNumber: typing.Union[MetaOapg.properties.referenceNumber, str, schemas.Unset] = schemas.unset,
        repaymentPercent: typing.Union[MetaOapg.properties.repaymentPercent, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        statusDate: typing.Union[MetaOapg.properties.statusDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PublicRecordResp':
        return super().__new__(
            cls,
            *args,
            adjustmentPercent=adjustmentPercent,
            amount=amount,
            bankruptcyAssetAmount=bankruptcyAssetAmount,
            bankruptcyVoluntaryIndicator=bankruptcyVoluntaryIndicator,
            bookPageSequence=bookPageSequence,
            consumerComment=consumerComment,
            courtCode=courtCode,
            courtName=courtName,
            disputeFlag=disputeFlag,
            ecoa=ecoa,
            evaluation=evaluation,
            filingDate=filingDate,
            plaintiffName=plaintiffName,
            referenceNumber=referenceNumber,
            repaymentPercent=repaymentPercent,
            status=status,
            statusDate=statusDate,
            _configuration=_configuration,
            **kwargs,
        )
