# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class RiskModelRespPrequal(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            evaluation = schemas.StrSchema
            grade = schemas.StrSchema
            modelIndicator = schemas.StrSchema
            score = schemas.StrSchema
            
            
            class scoreFactors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ScoreFactor']:
                        return ScoreFactor
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ScoreFactor'], typing.List['ScoreFactor']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scoreFactors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ScoreFactor':
                    return super().__getitem__(i)
            scorePercentile = schemas.StrSchema
            __annotations__ = {
                "evaluation": evaluation,
                "grade": grade,
                "modelIndicator": modelIndicator,
                "score": score,
                "scoreFactors": scoreFactors,
                "scorePercentile": scorePercentile,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evaluation"]) -> MetaOapg.properties.evaluation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grade"]) -> MetaOapg.properties.grade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelIndicator"]) -> MetaOapg.properties.modelIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreFactors"]) -> MetaOapg.properties.scoreFactors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scorePercentile"]) -> MetaOapg.properties.scorePercentile: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["evaluation", "grade", "modelIndicator", "score", "scoreFactors", "scorePercentile", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evaluation"]) -> typing.Union[MetaOapg.properties.evaluation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grade"]) -> typing.Union[MetaOapg.properties.grade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelIndicator"]) -> typing.Union[MetaOapg.properties.modelIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreFactors"]) -> typing.Union[MetaOapg.properties.scoreFactors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scorePercentile"]) -> typing.Union[MetaOapg.properties.scorePercentile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["evaluation", "grade", "modelIndicator", "score", "scoreFactors", "scorePercentile", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        evaluation: typing.Union[MetaOapg.properties.evaluation, str, schemas.Unset] = schemas.unset,
        grade: typing.Union[MetaOapg.properties.grade, str, schemas.Unset] = schemas.unset,
        modelIndicator: typing.Union[MetaOapg.properties.modelIndicator, str, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, str, schemas.Unset] = schemas.unset,
        scoreFactors: typing.Union[MetaOapg.properties.scoreFactors, list, tuple, schemas.Unset] = schemas.unset,
        scorePercentile: typing.Union[MetaOapg.properties.scorePercentile, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RiskModelRespPrequal':
        return super().__new__(
            cls,
            *args,
            evaluation=evaluation,
            grade=grade,
            modelIndicator=modelIndicator,
            score=score,
            scoreFactors=scoreFactors,
            scorePercentile=scorePercentile,
            _configuration=_configuration,
            **kwargs,
        )

from experian_prequal.model.score_factor import ScoreFactor
