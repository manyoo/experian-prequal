# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class FraudShieldResp(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            addressCount = schemas.StrSchema
            addressDate = schemas.StrSchema
            addressErrorCode = schemas.StrSchema
            dateOfBirth = schemas.StrSchema
            dateOfDeath = schemas.StrSchema
        
            @staticmethod
            def fraudShieldIndicators() -> typing.Type['FraudShieldIndicators']:
                return FraudShieldIndicators
            sic = schemas.StrSchema
            socialCount = schemas.StrSchema
            socialDate = schemas.StrSchema
            socialErrorCode = schemas.StrSchema
            ssnFirstPossibleIssuanceYear = schemas.StrSchema
            ssnLastPossibleIssuanceYear = schemas.StrSchema
            text = schemas.StrSchema
            type = schemas.StrSchema
            __annotations__ = {
                "addressCount": addressCount,
                "addressDate": addressDate,
                "addressErrorCode": addressErrorCode,
                "dateOfBirth": dateOfBirth,
                "dateOfDeath": dateOfDeath,
                "fraudShieldIndicators": fraudShieldIndicators,
                "sic": sic,
                "socialCount": socialCount,
                "socialDate": socialDate,
                "socialErrorCode": socialErrorCode,
                "ssnFirstPossibleIssuanceYear": ssnFirstPossibleIssuanceYear,
                "ssnLastPossibleIssuanceYear": ssnLastPossibleIssuanceYear,
                "text": text,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressCount"]) -> MetaOapg.properties.addressCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressDate"]) -> MetaOapg.properties.addressDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressErrorCode"]) -> MetaOapg.properties.addressErrorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfDeath"]) -> MetaOapg.properties.dateOfDeath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fraudShieldIndicators"]) -> 'FraudShieldIndicators': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sic"]) -> MetaOapg.properties.sic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["socialCount"]) -> MetaOapg.properties.socialCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["socialDate"]) -> MetaOapg.properties.socialDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["socialErrorCode"]) -> MetaOapg.properties.socialErrorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssnFirstPossibleIssuanceYear"]) -> MetaOapg.properties.ssnFirstPossibleIssuanceYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssnLastPossibleIssuanceYear"]) -> MetaOapg.properties.ssnLastPossibleIssuanceYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addressCount", "addressDate", "addressErrorCode", "dateOfBirth", "dateOfDeath", "fraudShieldIndicators", "sic", "socialCount", "socialDate", "socialErrorCode", "ssnFirstPossibleIssuanceYear", "ssnLastPossibleIssuanceYear", "text", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressCount"]) -> typing.Union[MetaOapg.properties.addressCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressDate"]) -> typing.Union[MetaOapg.properties.addressDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressErrorCode"]) -> typing.Union[MetaOapg.properties.addressErrorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfDeath"]) -> typing.Union[MetaOapg.properties.dateOfDeath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fraudShieldIndicators"]) -> typing.Union['FraudShieldIndicators', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sic"]) -> typing.Union[MetaOapg.properties.sic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["socialCount"]) -> typing.Union[MetaOapg.properties.socialCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["socialDate"]) -> typing.Union[MetaOapg.properties.socialDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["socialErrorCode"]) -> typing.Union[MetaOapg.properties.socialErrorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssnFirstPossibleIssuanceYear"]) -> typing.Union[MetaOapg.properties.ssnFirstPossibleIssuanceYear, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssnLastPossibleIssuanceYear"]) -> typing.Union[MetaOapg.properties.ssnLastPossibleIssuanceYear, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addressCount", "addressDate", "addressErrorCode", "dateOfBirth", "dateOfDeath", "fraudShieldIndicators", "sic", "socialCount", "socialDate", "socialErrorCode", "ssnFirstPossibleIssuanceYear", "ssnLastPossibleIssuanceYear", "text", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        addressCount: typing.Union[MetaOapg.properties.addressCount, str, schemas.Unset] = schemas.unset,
        addressDate: typing.Union[MetaOapg.properties.addressDate, str, schemas.Unset] = schemas.unset,
        addressErrorCode: typing.Union[MetaOapg.properties.addressErrorCode, str, schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, str, schemas.Unset] = schemas.unset,
        dateOfDeath: typing.Union[MetaOapg.properties.dateOfDeath, str, schemas.Unset] = schemas.unset,
        fraudShieldIndicators: typing.Union['FraudShieldIndicators', schemas.Unset] = schemas.unset,
        sic: typing.Union[MetaOapg.properties.sic, str, schemas.Unset] = schemas.unset,
        socialCount: typing.Union[MetaOapg.properties.socialCount, str, schemas.Unset] = schemas.unset,
        socialDate: typing.Union[MetaOapg.properties.socialDate, str, schemas.Unset] = schemas.unset,
        socialErrorCode: typing.Union[MetaOapg.properties.socialErrorCode, str, schemas.Unset] = schemas.unset,
        ssnFirstPossibleIssuanceYear: typing.Union[MetaOapg.properties.ssnFirstPossibleIssuanceYear, str, schemas.Unset] = schemas.unset,
        ssnLastPossibleIssuanceYear: typing.Union[MetaOapg.properties.ssnLastPossibleIssuanceYear, str, schemas.Unset] = schemas.unset,
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudShieldResp':
        return super().__new__(
            cls,
            *args,
            addressCount=addressCount,
            addressDate=addressDate,
            addressErrorCode=addressErrorCode,
            dateOfBirth=dateOfBirth,
            dateOfDeath=dateOfDeath,
            fraudShieldIndicators=fraudShieldIndicators,
            sic=sic,
            socialCount=socialCount,
            socialDate=socialDate,
            socialErrorCode=socialErrorCode,
            ssnFirstPossibleIssuanceYear=ssnFirstPossibleIssuanceYear,
            ssnLastPossibleIssuanceYear=ssnLastPossibleIssuanceYear,
            text=text,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from experian_prequal.model.fraud_shield_indicators import FraudShieldIndicators
