# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class PrequalRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Prequalification Credit Report Request
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def consumerPii() -> typing.Type['PII']:
                return PII
        
            @staticmethod
            def requestor() -> typing.Type['Requestor']:
                return Requestor
        
            @staticmethod
            def permissiblePurpose() -> typing.Type['PermissiblePurpose']:
                return PermissiblePurpose
        
            @staticmethod
            def resellerInfo() -> typing.Type['Reseller']:
                return Reseller
        
            @staticmethod
            def freezeOverride() -> typing.Type['FreezeOverride']:
                return FreezeOverride
        
            @staticmethod
            def vendorData() -> typing.Type['VendorData']:
                return VendorData
        
            @staticmethod
            def addOns() -> typing.Type['Addons']:
                return Addons
        
            @staticmethod
            def customOptions() -> typing.Type['CustomOptions']:
                return CustomOptions
            __annotations__ = {
                "consumerPii": consumerPii,
                "requestor": requestor,
                "permissiblePurpose": permissiblePurpose,
                "resellerInfo": resellerInfo,
                "freezeOverride": freezeOverride,
                "vendorData": vendorData,
                "addOns": addOns,
                "customOptions": customOptions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerPii"]) -> 'PII': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestor"]) -> 'Requestor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissiblePurpose"]) -> 'PermissiblePurpose': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resellerInfo"]) -> 'Reseller': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freezeOverride"]) -> 'FreezeOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorData"]) -> 'VendorData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addOns"]) -> 'Addons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customOptions"]) -> 'CustomOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["consumerPii", "requestor", "permissiblePurpose", "resellerInfo", "freezeOverride", "vendorData", "addOns", "customOptions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerPii"]) -> typing.Union['PII', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestor"]) -> typing.Union['Requestor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissiblePurpose"]) -> typing.Union['PermissiblePurpose', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resellerInfo"]) -> typing.Union['Reseller', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freezeOverride"]) -> typing.Union['FreezeOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorData"]) -> typing.Union['VendorData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addOns"]) -> typing.Union['Addons', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customOptions"]) -> typing.Union['CustomOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consumerPii", "requestor", "permissiblePurpose", "resellerInfo", "freezeOverride", "vendorData", "addOns", "customOptions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        consumerPii: typing.Union['PII', schemas.Unset] = schemas.unset,
        requestor: typing.Union['Requestor', schemas.Unset] = schemas.unset,
        permissiblePurpose: typing.Union['PermissiblePurpose', schemas.Unset] = schemas.unset,
        resellerInfo: typing.Union['Reseller', schemas.Unset] = schemas.unset,
        freezeOverride: typing.Union['FreezeOverride', schemas.Unset] = schemas.unset,
        vendorData: typing.Union['VendorData', schemas.Unset] = schemas.unset,
        addOns: typing.Union['Addons', schemas.Unset] = schemas.unset,
        customOptions: typing.Union['CustomOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PrequalRequest':
        return super().__new__(
            cls,
            *args,
            consumerPii=consumerPii,
            requestor=requestor,
            permissiblePurpose=permissiblePurpose,
            resellerInfo=resellerInfo,
            freezeOverride=freezeOverride,
            vendorData=vendorData,
            addOns=addOns,
            customOptions=customOptions,
            _configuration=_configuration,
            **kwargs,
        )

from experian_prequal.model.addons import Addons
from experian_prequal.model.custom_options import CustomOptions
from experian_prequal.model.freeze_override import FreezeOverride
from experian_prequal.model.permissible_purpose import PermissiblePurpose
from experian_prequal.model.pii import PII
from experian_prequal.model.requestor import Requestor
from experian_prequal.model.reseller import Reseller
from experian_prequal.model.vendor_data import VendorData
