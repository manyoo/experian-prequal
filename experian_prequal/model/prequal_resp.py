# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class PrequalResp(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class addressInformation(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AddressInformationResp']:
                        return AddressInformationResp
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AddressInformationResp'], typing.List['AddressInformationResp']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addressInformation':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AddressInformationResp':
                    return super().__getitem__(i)
        
            @staticmethod
            def consumerAssistanceReferralAddress() -> typing.Type['ConsumerAssistanceReferralAddress']:
                return ConsumerAssistanceReferralAddress
        
            @staticmethod
            def consumerIdentity() -> typing.Type['ConsumerIdentity']:
                return ConsumerIdentity
        
            @staticmethod
            def directCheck() -> typing.Type['DirectCheck']:
                return DirectCheck
        
            @staticmethod
            def employmentInformation() -> typing.Type['EmploymentInformation']:
                return EmploymentInformation
        
            @staticmethod
            def fraudShield() -> typing.Type['FraudShield']:
                return FraudShield
        
            @staticmethod
            def informationalMessage() -> typing.Type['InformationalMessage']:
                return InformationalMessage
        
            @staticmethod
            def inquiry() -> typing.Type['Inquiry']:
                return Inquiry
        
            @staticmethod
            def mla() -> typing.Type['MlaResp']:
                return MlaResp
        
            @staticmethod
            def ofac() -> typing.Type['Ofac']:
                return Ofac
        
            @staticmethod
            def summaries() -> typing.Type['Summaries']:
                return Summaries
        
            @staticmethod
            def publicRecord() -> typing.Type['PublicRecord']:
                return PublicRecord
        
            @staticmethod
            def staggSelect() -> typing.Type['ModelAttributes']:
                return ModelAttributes
        
            @staticmethod
            def riskModel() -> typing.Type['RiskModelPrequal']:
                return RiskModelPrequal
        
            @staticmethod
            def ssn() -> typing.Type['Ssn']:
                return Ssn
        
            @staticmethod
            def statement() -> typing.Type['Statement']:
                return Statement
        
            @staticmethod
            def tradeline() -> typing.Type['Tradeline']:
                return Tradeline
        
            @staticmethod
            def uniqueConsumerIdentifier() -> typing.Type['UniqueConsumerIdentifier']:
                return UniqueConsumerIdentifier
            clarityAttributes = schemas.DictSchema
            __annotations__ = {
                "addressInformation": addressInformation,
                "consumerAssistanceReferralAddress": consumerAssistanceReferralAddress,
                "consumerIdentity": consumerIdentity,
                "directCheck": directCheck,
                "employmentInformation": employmentInformation,
                "fraudShield": fraudShield,
                "informationalMessage": informationalMessage,
                "inquiry": inquiry,
                "mla": mla,
                "ofac": ofac,
                "summaries": summaries,
                "publicRecord": publicRecord,
                "staggSelect": staggSelect,
                "riskModel": riskModel,
                "ssn": ssn,
                "statement": statement,
                "tradeline": tradeline,
                "uniqueConsumerIdentifier": uniqueConsumerIdentifier,
                "clarityAttributes": clarityAttributes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressInformation"]) -> MetaOapg.properties.addressInformation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerAssistanceReferralAddress"]) -> 'ConsumerAssistanceReferralAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumerIdentity"]) -> 'ConsumerIdentity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directCheck"]) -> 'DirectCheck': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentInformation"]) -> 'EmploymentInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fraudShield"]) -> 'FraudShield': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["informationalMessage"]) -> 'InformationalMessage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inquiry"]) -> 'Inquiry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mla"]) -> 'MlaResp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ofac"]) -> 'Ofac': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summaries"]) -> 'Summaries': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicRecord"]) -> 'PublicRecord': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staggSelect"]) -> 'ModelAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskModel"]) -> 'RiskModelPrequal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> 'Ssn': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statement"]) -> 'Statement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tradeline"]) -> 'Tradeline': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uniqueConsumerIdentifier"]) -> 'UniqueConsumerIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clarityAttributes"]) -> MetaOapg.properties.clarityAttributes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addressInformation", "consumerAssistanceReferralAddress", "consumerIdentity", "directCheck", "employmentInformation", "fraudShield", "informationalMessage", "inquiry", "mla", "ofac", "summaries", "publicRecord", "staggSelect", "riskModel", "ssn", "statement", "tradeline", "uniqueConsumerIdentifier", "clarityAttributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressInformation"]) -> typing.Union[MetaOapg.properties.addressInformation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerAssistanceReferralAddress"]) -> typing.Union['ConsumerAssistanceReferralAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumerIdentity"]) -> typing.Union['ConsumerIdentity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directCheck"]) -> typing.Union['DirectCheck', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentInformation"]) -> typing.Union['EmploymentInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fraudShield"]) -> typing.Union['FraudShield', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["informationalMessage"]) -> typing.Union['InformationalMessage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inquiry"]) -> typing.Union['Inquiry', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mla"]) -> typing.Union['MlaResp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ofac"]) -> typing.Union['Ofac', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summaries"]) -> typing.Union['Summaries', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicRecord"]) -> typing.Union['PublicRecord', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staggSelect"]) -> typing.Union['ModelAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskModel"]) -> typing.Union['RiskModelPrequal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union['Ssn', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statement"]) -> typing.Union['Statement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tradeline"]) -> typing.Union['Tradeline', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uniqueConsumerIdentifier"]) -> typing.Union['UniqueConsumerIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clarityAttributes"]) -> typing.Union[MetaOapg.properties.clarityAttributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addressInformation", "consumerAssistanceReferralAddress", "consumerIdentity", "directCheck", "employmentInformation", "fraudShield", "informationalMessage", "inquiry", "mla", "ofac", "summaries", "publicRecord", "staggSelect", "riskModel", "ssn", "statement", "tradeline", "uniqueConsumerIdentifier", "clarityAttributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        addressInformation: typing.Union[MetaOapg.properties.addressInformation, list, tuple, schemas.Unset] = schemas.unset,
        consumerAssistanceReferralAddress: typing.Union['ConsumerAssistanceReferralAddress', schemas.Unset] = schemas.unset,
        consumerIdentity: typing.Union['ConsumerIdentity', schemas.Unset] = schemas.unset,
        directCheck: typing.Union['DirectCheck', schemas.Unset] = schemas.unset,
        employmentInformation: typing.Union['EmploymentInformation', schemas.Unset] = schemas.unset,
        fraudShield: typing.Union['FraudShield', schemas.Unset] = schemas.unset,
        informationalMessage: typing.Union['InformationalMessage', schemas.Unset] = schemas.unset,
        inquiry: typing.Union['Inquiry', schemas.Unset] = schemas.unset,
        mla: typing.Union['MlaResp', schemas.Unset] = schemas.unset,
        ofac: typing.Union['Ofac', schemas.Unset] = schemas.unset,
        summaries: typing.Union['Summaries', schemas.Unset] = schemas.unset,
        publicRecord: typing.Union['PublicRecord', schemas.Unset] = schemas.unset,
        staggSelect: typing.Union['ModelAttributes', schemas.Unset] = schemas.unset,
        riskModel: typing.Union['RiskModelPrequal', schemas.Unset] = schemas.unset,
        ssn: typing.Union['Ssn', schemas.Unset] = schemas.unset,
        statement: typing.Union['Statement', schemas.Unset] = schemas.unset,
        tradeline: typing.Union['Tradeline', schemas.Unset] = schemas.unset,
        uniqueConsumerIdentifier: typing.Union['UniqueConsumerIdentifier', schemas.Unset] = schemas.unset,
        clarityAttributes: typing.Union[MetaOapg.properties.clarityAttributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PrequalResp':
        return super().__new__(
            cls,
            *args,
            addressInformation=addressInformation,
            consumerAssistanceReferralAddress=consumerAssistanceReferralAddress,
            consumerIdentity=consumerIdentity,
            directCheck=directCheck,
            employmentInformation=employmentInformation,
            fraudShield=fraudShield,
            informationalMessage=informationalMessage,
            inquiry=inquiry,
            mla=mla,
            ofac=ofac,
            summaries=summaries,
            publicRecord=publicRecord,
            staggSelect=staggSelect,
            riskModel=riskModel,
            ssn=ssn,
            statement=statement,
            tradeline=tradeline,
            uniqueConsumerIdentifier=uniqueConsumerIdentifier,
            clarityAttributes=clarityAttributes,
            _configuration=_configuration,
            **kwargs,
        )

from experian_prequal.model.address_information_resp import AddressInformationResp
from experian_prequal.model.consumer_assistance_referral_address import ConsumerAssistanceReferralAddress
from experian_prequal.model.consumer_identity import ConsumerIdentity
from experian_prequal.model.direct_check import DirectCheck
from experian_prequal.model.employment_information import EmploymentInformation
from experian_prequal.model.fraud_shield import FraudShield
from experian_prequal.model.informational_message import InformationalMessage
from experian_prequal.model.inquiry import Inquiry
from experian_prequal.model.mla_resp import MlaResp
from experian_prequal.model.model_attributes import ModelAttributes
from experian_prequal.model.ofac import Ofac
from experian_prequal.model.public_record import PublicRecord
from experian_prequal.model.risk_model_prequal import RiskModelPrequal
from experian_prequal.model.ssn import Ssn
from experian_prequal.model.statement import Statement
from experian_prequal.model.summaries import Summaries
from experian_prequal.model.tradeline import Tradeline
from experian_prequal.model.unique_consumer_identifier import UniqueConsumerIdentifier
