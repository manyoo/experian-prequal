# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class AddressInformationResp(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Best Consumer Addresses
    """


    class MetaOapg:
        
        class properties:
            censusGeoCode = schemas.StrSchema
            city = schemas.StrSchema
            countyCode = schemas.StrSchema
            dwellingType = schemas.StrSchema
            firstReportedDate = schemas.StrSchema
            lastReportingSubscriberCode = schemas.StrSchema
            lastUpdatedDate = schemas.StrSchema
            msaCode = schemas.StrSchema
            source = schemas.StrSchema
            state = schemas.StrSchema
            stateCode = schemas.StrSchema
            streetName = schemas.StrSchema
            streetPrefix = schemas.StrSchema
            streetSuffix = schemas.StrSchema
            timesReported = schemas.StrSchema
            unitId = schemas.StrSchema
            unitType = schemas.StrSchema
            zipCode = schemas.StrSchema
            __annotations__ = {
                "censusGeoCode": censusGeoCode,
                "city": city,
                "countyCode": countyCode,
                "dwellingType": dwellingType,
                "firstReportedDate": firstReportedDate,
                "lastReportingSubscriberCode": lastReportingSubscriberCode,
                "lastUpdatedDate": lastUpdatedDate,
                "msaCode": msaCode,
                "source": source,
                "state": state,
                "stateCode": stateCode,
                "streetName": streetName,
                "streetPrefix": streetPrefix,
                "streetSuffix": streetSuffix,
                "timesReported": timesReported,
                "unitId": unitId,
                "unitType": unitType,
                "zipCode": zipCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["censusGeoCode"]) -> MetaOapg.properties.censusGeoCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countyCode"]) -> MetaOapg.properties.countyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dwellingType"]) -> MetaOapg.properties.dwellingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstReportedDate"]) -> MetaOapg.properties.firstReportedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastReportingSubscriberCode"]) -> MetaOapg.properties.lastReportingSubscriberCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdatedDate"]) -> MetaOapg.properties.lastUpdatedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["msaCode"]) -> MetaOapg.properties.msaCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateCode"]) -> MetaOapg.properties.stateCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetName"]) -> MetaOapg.properties.streetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetPrefix"]) -> MetaOapg.properties.streetPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetSuffix"]) -> MetaOapg.properties.streetSuffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timesReported"]) -> MetaOapg.properties.timesReported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitId"]) -> MetaOapg.properties.unitId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitType"]) -> MetaOapg.properties.unitType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipCode"]) -> MetaOapg.properties.zipCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["censusGeoCode", "city", "countyCode", "dwellingType", "firstReportedDate", "lastReportingSubscriberCode", "lastUpdatedDate", "msaCode", "source", "state", "stateCode", "streetName", "streetPrefix", "streetSuffix", "timesReported", "unitId", "unitType", "zipCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["censusGeoCode"]) -> typing.Union[MetaOapg.properties.censusGeoCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countyCode"]) -> typing.Union[MetaOapg.properties.countyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dwellingType"]) -> typing.Union[MetaOapg.properties.dwellingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstReportedDate"]) -> typing.Union[MetaOapg.properties.firstReportedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastReportingSubscriberCode"]) -> typing.Union[MetaOapg.properties.lastReportingSubscriberCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdatedDate"]) -> typing.Union[MetaOapg.properties.lastUpdatedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["msaCode"]) -> typing.Union[MetaOapg.properties.msaCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateCode"]) -> typing.Union[MetaOapg.properties.stateCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetName"]) -> typing.Union[MetaOapg.properties.streetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetPrefix"]) -> typing.Union[MetaOapg.properties.streetPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetSuffix"]) -> typing.Union[MetaOapg.properties.streetSuffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timesReported"]) -> typing.Union[MetaOapg.properties.timesReported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitId"]) -> typing.Union[MetaOapg.properties.unitId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitType"]) -> typing.Union[MetaOapg.properties.unitType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipCode"]) -> typing.Union[MetaOapg.properties.zipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["censusGeoCode", "city", "countyCode", "dwellingType", "firstReportedDate", "lastReportingSubscriberCode", "lastUpdatedDate", "msaCode", "source", "state", "stateCode", "streetName", "streetPrefix", "streetSuffix", "timesReported", "unitId", "unitType", "zipCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        censusGeoCode: typing.Union[MetaOapg.properties.censusGeoCode, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        countyCode: typing.Union[MetaOapg.properties.countyCode, str, schemas.Unset] = schemas.unset,
        dwellingType: typing.Union[MetaOapg.properties.dwellingType, str, schemas.Unset] = schemas.unset,
        firstReportedDate: typing.Union[MetaOapg.properties.firstReportedDate, str, schemas.Unset] = schemas.unset,
        lastReportingSubscriberCode: typing.Union[MetaOapg.properties.lastReportingSubscriberCode, str, schemas.Unset] = schemas.unset,
        lastUpdatedDate: typing.Union[MetaOapg.properties.lastUpdatedDate, str, schemas.Unset] = schemas.unset,
        msaCode: typing.Union[MetaOapg.properties.msaCode, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        stateCode: typing.Union[MetaOapg.properties.stateCode, str, schemas.Unset] = schemas.unset,
        streetName: typing.Union[MetaOapg.properties.streetName, str, schemas.Unset] = schemas.unset,
        streetPrefix: typing.Union[MetaOapg.properties.streetPrefix, str, schemas.Unset] = schemas.unset,
        streetSuffix: typing.Union[MetaOapg.properties.streetSuffix, str, schemas.Unset] = schemas.unset,
        timesReported: typing.Union[MetaOapg.properties.timesReported, str, schemas.Unset] = schemas.unset,
        unitId: typing.Union[MetaOapg.properties.unitId, str, schemas.Unset] = schemas.unset,
        unitType: typing.Union[MetaOapg.properties.unitType, str, schemas.Unset] = schemas.unset,
        zipCode: typing.Union[MetaOapg.properties.zipCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddressInformationResp':
        return super().__new__(
            cls,
            *args,
            censusGeoCode=censusGeoCode,
            city=city,
            countyCode=countyCode,
            dwellingType=dwellingType,
            firstReportedDate=firstReportedDate,
            lastReportingSubscriberCode=lastReportingSubscriberCode,
            lastUpdatedDate=lastUpdatedDate,
            msaCode=msaCode,
            source=source,
            state=state,
            stateCode=stateCode,
            streetName=streetName,
            streetPrefix=streetPrefix,
            streetSuffix=streetSuffix,
            timesReported=timesReported,
            unitId=unitId,
            unitType=unitType,
            zipCode=zipCode,
            _configuration=_configuration,
            **kwargs,
        )
