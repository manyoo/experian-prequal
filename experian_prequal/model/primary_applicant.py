# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class PrimaryApplicant(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Primary Credit Applicant Information
    """


    class MetaOapg:
        required = {
            "name",
            "currentAddress",
        }
        
        class properties:
        
            @staticmethod
            def name() -> typing.Type['PAName']:
                return PAName
        
            @staticmethod
            def currentAddress() -> typing.Type['Address']:
                return Address
        
            @staticmethod
            def dob() -> typing.Type['DOB']:
                return DOB
        
            @staticmethod
            def ssn() -> typing.Type['SSN']:
                return SSN
        
            @staticmethod
            def driverslicense() -> typing.Type['DriverLicense']:
                return DriverLicense
            
            
            class phone(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Phone']:
                        return Phone
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Phone'], typing.List['Phone']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'phone':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Phone':
                    return super().__getitem__(i)
        
            @staticmethod
            def employment() -> typing.Type['Employment']:
                return Employment
            
            
            class previousAddress(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Address']:
                        return Address
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Address'], typing.List['Address']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'previousAddress':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Address':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "currentAddress": currentAddress,
                "dob": dob,
                "ssn": ssn,
                "driverslicense": driverslicense,
                "phone": phone,
                "employment": employment,
                "previousAddress": previousAddress,
            }
    
    name: 'PAName'
    currentAddress: 'Address'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'PAName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dob"]) -> 'DOB': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> 'SSN': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["driverslicense"]) -> 'DriverLicense': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment"]) -> 'Employment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousAddress"]) -> MetaOapg.properties.previousAddress: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "currentAddress", "dob", "ssn", "driverslicense", "phone", "employment", "previousAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'PAName': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentAddress"]) -> 'Address': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dob"]) -> typing.Union['DOB', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union['SSN', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["driverslicense"]) -> typing.Union['DriverLicense', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment"]) -> typing.Union['Employment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousAddress"]) -> typing.Union[MetaOapg.properties.previousAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "currentAddress", "dob", "ssn", "driverslicense", "phone", "employment", "previousAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: 'PAName',
        currentAddress: 'Address',
        dob: typing.Union['DOB', schemas.Unset] = schemas.unset,
        ssn: typing.Union['SSN', schemas.Unset] = schemas.unset,
        driverslicense: typing.Union['DriverLicense', schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, list, tuple, schemas.Unset] = schemas.unset,
        employment: typing.Union['Employment', schemas.Unset] = schemas.unset,
        previousAddress: typing.Union[MetaOapg.properties.previousAddress, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PrimaryApplicant':
        return super().__new__(
            cls,
            *args,
            name=name,
            currentAddress=currentAddress,
            dob=dob,
            ssn=ssn,
            driverslicense=driverslicense,
            phone=phone,
            employment=employment,
            previousAddress=previousAddress,
            _configuration=_configuration,
            **kwargs,
        )

from experian_prequal.model.address import Address
from experian_prequal.model.dob import DOB
from experian_prequal.model.driver_license import DriverLicense
from experian_prequal.model.employment import Employment
from experian_prequal.model.pa_name import PAName
from experian_prequal.model.phone import Phone
from experian_prequal.model.ssn import SSN
