# coding: utf-8

"""
    Prequalification Credit Report

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: OpenAPI3.1.0.12
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401


class PrequalResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class creditProfile(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PrequalResp']:
                        return PrequalResp
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PrequalResp'], typing.List['PrequalResp']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'creditProfile':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PrequalResp':
                    return super().__getitem__(i)
        
            @staticmethod
            def arf() -> typing.Type['Arf']:
                return Arf
        
            @staticmethod
            def tty() -> typing.Type['Tty']:
                return Tty
            __annotations__ = {
                "creditProfile": creditProfile,
                "arf": arf,
                "tty": tty,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditProfile"]) -> MetaOapg.properties.creditProfile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arf"]) -> 'Arf': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tty"]) -> 'Tty': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["creditProfile", "arf", "tty", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditProfile"]) -> typing.Union[MetaOapg.properties.creditProfile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arf"]) -> typing.Union['Arf', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tty"]) -> typing.Union['Tty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creditProfile", "arf", "tty", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        creditProfile: typing.Union[MetaOapg.properties.creditProfile, list, tuple, schemas.Unset] = schemas.unset,
        arf: typing.Union['Arf', schemas.Unset] = schemas.unset,
        tty: typing.Union['Tty', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PrequalResponse':
        return super().__new__(
            cls,
            *args,
            creditProfile=creditProfile,
            arf=arf,
            tty=tty,
            _configuration=_configuration,
            **kwargs,
        )

from experian_prequal.model.arf import Arf
from experian_prequal.model.prequal_resp import PrequalResp
from experian_prequal.model.tty import Tty
