# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from experian_prequal import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from experian_prequal import schemas  # noqa: F401

from experian_prequal.model.prequal_request import PrequalRequest
from experian_prequal.model.prequal_response import PrequalResponse
from experian_prequal.model.error_response import ErrorResponse

from . import path

# Header params


class ClientReferenceIdSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "SBMYSQL": "SBMYSQL",
        }
    
    @schemas.classproperty
    def SBMYSQL(cls):
        return cls("SBMYSQL")


class ContentTypeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "application/json": "APPLICATION_JSON",
        }
    
    @schemas.classproperty
    def APPLICATION_JSON(cls):
        return cls("application/json")


class AcceptSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "application/json": "APPLICATION_JSON",
        }
    
    @schemas.classproperty
    def APPLICATION_JSON(cls):
        return cls("application/json")
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
        'Content-Type': typing.Union[ContentTypeSchema, str, ],
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'clientReferenceId': typing.Union[ClientReferenceIdSchema, str, ],
        'Accept': typing.Union[AcceptSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_client_reference_id = api_client.HeaderParameter(
    name="clientReferenceId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ClientReferenceIdSchema,
)
request_header_content_type = api_client.HeaderParameter(
    name="Content-Type",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ContentTypeSchema,
    required=True,
)
request_header_accept = api_client.HeaderParameter(
    name="Accept",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AcceptSchema,
)
# body param
SchemaForRequestBodyApplicationJson = PrequalRequest


request_body_body = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'OauthSecurity',
]
ExperianTransactionIdSchema = schemas.StrSchema
experian_transaction_id_parameter = api_client.HeaderParameter(
    name="experianTransactionId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ExperianTransactionIdSchema,
)
ClientReferenceIdSchema = schemas.StrSchema
client_reference_id_parameter = api_client.HeaderParameter(
    name="clientReferenceId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ClientReferenceIdSchema,
)
SchemaFor200ResponseBodyApplicationJson = PrequalResponse
ResponseHeadersFor200 = typing_extensions.TypedDict(
    'ResponseHeadersFor200',
    {
        'experianTransactionId': ExperianTransactionIdSchema,
        'clientReferenceId': ClientReferenceIdSchema,
    }
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor200


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
    headers=[
        experian_transaction_id_parameter,
        client_reference_id_parameter,
    ]
)
ExperianTransactionIdSchema = schemas.StrSchema
experian_transaction_id_parameter = api_client.HeaderParameter(
    name="experianTransactionId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ExperianTransactionIdSchema,
)
ClientReferenceIdSchema = schemas.StrSchema
client_reference_id_parameter = api_client.HeaderParameter(
    name="clientReferenceId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ClientReferenceIdSchema,
)
SchemaFor400ResponseBodyApplicationJson = ErrorResponse
ResponseHeadersFor400 = typing_extensions.TypedDict(
    'ResponseHeadersFor400',
    {
        'experianTransactionId': ExperianTransactionIdSchema,
        'clientReferenceId': ClientReferenceIdSchema,
    }
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor400


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
    headers=[
        experian_transaction_id_parameter,
        client_reference_id_parameter,
    ]
)
ExperianTransactionIdSchema = schemas.StrSchema
experian_transaction_id_parameter = api_client.HeaderParameter(
    name="experianTransactionId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ExperianTransactionIdSchema,
)
ClientReferenceIdSchema = schemas.StrSchema
client_reference_id_parameter = api_client.HeaderParameter(
    name="clientReferenceId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ClientReferenceIdSchema,
)
SchemaFor403ResponseBodyApplicationJson = ErrorResponse
ResponseHeadersFor403 = typing_extensions.TypedDict(
    'ResponseHeadersFor403',
    {
        'experianTransactionId': ExperianTransactionIdSchema,
        'clientReferenceId': ClientReferenceIdSchema,
    }
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor403ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor403


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
    headers=[
        experian_transaction_id_parameter,
        client_reference_id_parameter,
    ]
)
ExperianTransactionIdSchema = schemas.StrSchema
experian_transaction_id_parameter = api_client.HeaderParameter(
    name="experianTransactionId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ExperianTransactionIdSchema,
)
ClientReferenceIdSchema = schemas.StrSchema
client_reference_id_parameter = api_client.HeaderParameter(
    name="clientReferenceId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ClientReferenceIdSchema,
)
SchemaFor404ResponseBodyApplicationJson = ErrorResponse
ResponseHeadersFor404 = typing_extensions.TypedDict(
    'ResponseHeadersFor404',
    {
        'experianTransactionId': ExperianTransactionIdSchema,
        'clientReferenceId': ClientReferenceIdSchema,
    }
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor404


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
    headers=[
        experian_transaction_id_parameter,
        client_reference_id_parameter,
    ]
)
ExperianTransactionIdSchema = schemas.StrSchema
experian_transaction_id_parameter = api_client.HeaderParameter(
    name="experianTransactionId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ExperianTransactionIdSchema,
)
ClientReferenceIdSchema = schemas.StrSchema
client_reference_id_parameter = api_client.HeaderParameter(
    name="clientReferenceId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ClientReferenceIdSchema,
)
SchemaFor500ResponseBodyApplicationJson = ErrorResponse
ResponseHeadersFor500 = typing_extensions.TypedDict(
    'ResponseHeadersFor500',
    {
        'experianTransactionId': ExperianTransactionIdSchema,
        'clientReferenceId': ClientReferenceIdSchema,
    }
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor500


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
    headers=[
        experian_transaction_id_parameter,
        client_reference_id_parameter,
    ]
)
ExperianTransactionIdSchema = schemas.StrSchema
experian_transaction_id_parameter = api_client.HeaderParameter(
    name="experianTransactionId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ExperianTransactionIdSchema,
)
ClientReferenceIdSchema = schemas.StrSchema
client_reference_id_parameter = api_client.HeaderParameter(
    name="clientReferenceId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ClientReferenceIdSchema,
)
SchemaFor504ResponseBodyApplicationJson = ErrorResponse
ResponseHeadersFor504 = typing_extensions.TypedDict(
    'ResponseHeadersFor504',
    {
        'experianTransactionId': ExperianTransactionIdSchema,
        'clientReferenceId': ClientReferenceIdSchema,
    }
)


@dataclass
class ApiResponseFor504(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor504ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor504


_response_for_504 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor504,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor504ResponseBodyApplicationJson),
    },
    headers=[
        experian_transaction_id_parameter,
        client_reference_id_parameter,
    ]
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '403': _response_for_403,
    '404': _response_for_404,
    '500': _response_for_500,
    '504': _response_for_504,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _credit_report_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: typing_extensions.Literal["application/json"] = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _credit_report_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _credit_report_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _credit_report_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _credit_report_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = 'application/json',
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Prequalification Credit Report
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_client_reference_id,
            request_header_content_type,
            request_header_accept,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_body.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class CreditReport(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def credit_report(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: typing_extensions.Literal["application/json"] = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def credit_report(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def credit_report(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def credit_report(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def credit_report(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = 'application/json',
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._credit_report_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: typing_extensions.Literal["application/json"] = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = 'application/json',
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._credit_report_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


